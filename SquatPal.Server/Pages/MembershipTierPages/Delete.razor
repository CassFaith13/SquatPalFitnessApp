@page "/membership/delete/{MembershipTierId:int}"

@inject IMembershipTierService _membershipService
@inject NavigationManager _navManager

<h2 class="text text-danger text-center">Are you sure you want to delete this Membership Tier?</h2>

@if (membershipTierDetail is null)
{
    <p class="text-warning">There is no information on this Membership Tier</p>
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <span>Membership Tier #@membershipTierDetail.MembershipTierId</span>
            </div>
            <div class="card-body">
                <h4 class="card-title">@membershipTierDetail.Name</h4>
                <p class="card-text">Monthly Price: $@membershipTierDetail.Price</p>
                <p class="card-text">Tier Benefits: @membershipTierDetail.Benefits</p>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-25">
                <button type="submit" class="btn btn-danger" @onclick="DeleteMembershipTier">Delete</button>
                <a href="/membership" class="btn btn-secondary mt-2">Back to Index</a>
            </div>
        </div>
    </div>
}

@code{
    [Parameter]
    public int MembershipTierId { get; set; }
    public MembershipTierDetail? membershipTierDetail { get; set; }
    private string? errorMessage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        membershipTierDetail = await _membershipService.GetMembershipTier(MembershipTierId);
    }
    public async Task DeleteMembershipTier()
    {
        var isSuccess = await _membershipService.DeleteMembershipTier(MembershipTierId);
        if (isSuccess)
        {
            _navManager.NavigateTo("/membership");
        }
        else
        {
            errorMessage = "Unable to delete Membership Tier!";
        }
    }
}